"""
Export Utilities
Functions for exporting summaries to various formats
"""

import os
from typing import Optional, Dict, Any
from datetime import datetime
from ..database.models import Summary
import logging

logger = logging.getLogger(__name__)


def export_summary(summary_data: Dict[str, Any], file_path: str, format_type: str) -> bool:
    """
    Export summary to specified format

    Args:
        summary_data: Summary data dictionary
        file_path: Output file path
        format_type: Export format ('pdf' or 'txt')

    Returns:
        True if successful, False otherwise
    """
    try:
        if format_type.lower() == 'pdf':
            return export_to_pdf(summary_data, file_path)
        elif format_type.lower() == 'txt':
            return export_to_text(summary_data, file_path)
        else:
            return False
    except Exception as e:
        logger.error(f"Export error: {e}")
        return False


def export_to_text(summary_data: Dict[str, Any], file_path: str) -> bool:
    """Export summary to text file"""
    try:
        content = build_text_content(summary_data)

        # Ensure directory exists
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)

        return True
    except Exception as e:
        logger.error(f"Text export error: {e}")
        return False


def export_to_pdf(summary_data: Dict[str, Any], file_path: str) -> bool:
    """Export summary to PDF file"""
    try:
        # Try to import reportlab, fallback to text if not available
        try:
            from reportlab.lib.pagesizes import letter, A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib.units import inch
        except ImportError:
            logger.warning("ReportLab not available, falling back to text export")
            # Change file extension to .txt
            txt_path = file_path.replace('.pdf', '.txt')
            return export_to_text(summary_data, txt_path)

        # Ensure directory exists
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        # Create PDF document
        doc = SimpleDocTemplate(file_path, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []

        # Add title
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1  # Center alignment
        )

        story.append(Paragraph("PDF Summary", title_style))
        story.append(Spacer(1, 12))

        # Add document info
        if 'document_info' in summary_data:
            doc_info = summary_data['document_info']
            info_style = styles['Normal']
            info_style.fontSize = 12

            story.append(Paragraph(f"<b>Document:</b> {doc_info.get('name', 'Unknown')}", info_style))
            story.append(Paragraph(f"<b>Size:</b> {doc_info.get('size', 0) / 1024:.1f} KB", info_style))
            if doc_info.get('pages'):
                story.append(Paragraph(f"<b>Pages:</b> {doc_info['pages']}", info_style))
            story.append(Spacer(1, 12))

        # Add summary metadata
        meta_style = styles['Normal']
        meta_style.fontSize = 11

        story.append(Paragraph(f"<b>Summary Type:</b> {summary_data.get('type', 'unknown').title()}", meta_style))
        story.append(Paragraph(f"<b>Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", meta_style))
        story.append(Paragraph(f"<b>Processing Time:</b> {summary_data.get('processing_time', 0):.2f} seconds", meta_style))
        story.append(Spacer(1, 12))

        # Add summary content
        story.append(Paragraph("<b>Summary Content:</b>", styles['Heading2']))
        story.append(Spacer(1, 6))

        content_style = ParagraphStyle(
            'Content',
            parent=styles['Normal'],
            fontSize=12,
            spaceAfter=12,
            leftIndent=12
        )

        # Split content into paragraphs
        content = summary_data.get('content', '')
        paragraphs = content.split('\n\n')

        for paragraph in paragraphs:
            if paragraph.strip():
                story.append(Paragraph(paragraph.strip(), content_style))

        # Add footer
        story.append(Spacer(1, 24))
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=9,
            alignment=1,
            textColor='gray'
        )

        story.append(Paragraph("Generated by PDF Summarizer AI", footer_style))

        # Build PDF
        doc.build(story)
        return True

    except Exception as e:
        logger.error(f"PDF export error: {e}")
        return False


def build_text_content(summary_data: Dict[str, Any]) -> str:
    """Build text content for export"""
    lines = []

    # Header
    lines.append("=" * 50)
    lines.append("PDF SUMMARY")
    lines.append("=" * 50)
    lines.append("")

    # Document information
    if 'document_info' in summary_data:
        doc_info = summary_data['document_info']
        lines.append("DOCUMENT INFORMATION")
        lines.append("-" * 20)
        lines.append(f"Name: {doc_info.get('name', 'Unknown')}")
        lines.append(f"Size: {doc_info.get('size', 0) / 1024:.1f} KB")
        if doc_info.get('pages'):
            lines.append(f"Pages: {doc_info['pages']}")
        lines.append("")

    # Summary metadata
    lines.append("SUMMARY METADATA")
    lines.append("-" * 17)
    lines.append(f"Type: {summary_data.get('type', 'unknown').title()}")
    lines.append(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    lines.append(f"Processing Time: {summary_data.get('processing_time', 0):.2f} seconds")
    if 'model_used' in summary_data:
        lines.append(f"AI Model: {summary_data['model_used']}")
    lines.append("")

    # Summary content
    lines.append("SUMMARY CONTENT")
    lines.append("-" * 16)
    lines.append(summary_data.get('content', 'No content available'))
    lines.append("")

    # Footer
    lines.append("=" * 50)
    lines.append("Generated by PDF Summarizer AI")
    lines.append("=" * 50)

    return "\n".join(lines)


def export_summary_to_text(summary: Summary, output_dir: str = "exports") -> Optional[str]:
    """
    Export summary to text file

    Args:
        summary: Summary object to export
        output_dir: Directory to save the export

    Returns:
        Path to exported file or None if export fails
    """
    try:
        # Create output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)

        # Generate filename
        base_name = summary.document_id if summary.document_id else "summary"
        filename = generate_filename(base_name, "txt")
        output_path = os.path.join(output_dir, filename)

        # Create content
        content = f"""PDF SUMMARY
{'=' * 50}

SUMMARY CONTENT
{'-' * 16}

{summary.summary_text}

METADATA
{'-' * 8}
- Type: {summary.summary_type}
- Created: {summary.created_at.strftime('%Y-%m-%d %H:%M:%S')}
- Model: {summary.model_used}
- Processing Time: {summary.processing_time:.2f} seconds
- Token Count: {summary.total_tokens}

Generated by PDF Summarizer AI
{'=' * 50}
"""

        # Write to file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(content)

        return output_path

    except Exception as e:
        logger.error(f"Text export error: {e}")
        return None


def export_summary_to_pdf(summary: Summary, output_dir: str = "exports") -> Optional[str]:
    """
    Export summary to PDF file

    Args:
        summary: Summary object to export
        output_dir: Directory to save the export

    Returns:
        Path to exported file or None if export fails
    """
    try:
        # Create output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)

        # Generate filename
        base_name = summary.document_id if summary.document_id else "summary"
        filename = generate_filename(base_name, "pdf")
        output_path = os.path.join(output_dir, filename)

        # For now, create a text file as fallback if ReportLab is not available
        # In a full implementation, you would use ReportLab here
        logger.info("PDF export not fully implemented, creating text file instead")
        return export_summary_to_text(summary, output_dir)

    except Exception as e:
        logger.error(f"PDF export error: {e}")
        return None


def generate_filename(base_name: str, extension: str) -> str:
    """
    Generate a unique filename with timestamp

    Args:
        base_name: Base filename
        extension: File extension

    Returns:
        Unique filename
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"{base_name}_summary_{timestamp}.{extension}"